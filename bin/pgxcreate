#!/usr/bin/env Rscript

##
## Make PGX file from CSV files
##
## (c) 2020 BigOmics Analytics 
##


if(!require(optparse)) install.packages("optparse")
require(optparse)

option_list = list(
  make_option(c("-c", "--counts"), type="character", default="counts.tsv", 
              help="counts file name", metavar="character"),
  make_option(c("-s", "--samples"), type="character", default="samples.tsv", 
              help="samples file name [default= %default]", metavar="character"),
  make_option(c("-p", "--contrasts"), type="character", default="auto", 
              help="specify contrasts file (or auto) for comparisons [default= %default]", metavar="character"),
  make_option(c("-o", "--out"), type="character", default=NULL, 
              help="output PGX file name [default= %default]", metavar="character"),
  make_option(c("-r", "--root"), type="character", default="/omicsplayground", 
              help="omicsplayground root folder [default= %default]", metavar="character"),      
  make_option(c("-x", "--maxgenes"), type="integer", default=25000, 
              help="maximum number of genes [default= %default]", metavar="integer"),      
  make_option(c("-z", "--maxgenesets"), type="integer", default=5000, 
              help="maximum number of genesets [default= %default]", metavar="integer"),      
  make_option(c("-m", "--gxmethods"), type="character", default="trend.limma,edger.qlf,edger.lrt", 
              help="gene testing methods [default= %default]", metavar="character"),      
  make_option(c("-d", "--gsetmethods"), type="character", default="fisher,gsva,fgsea", 
              help="geneset testing methods [default= %default]", metavar="character")
)

opt_parser = OptionParser(option_list=option_list)
opt = parse_args(opt_parser)

if(0) {
    opt <- list()
    opt$counts  = "human/counts.csv"
    opt$samples = "human/samples.csv"
    opt$contrasts = "human/contrasts.csv"
#   opt$contrasts = "auto"
    opt$out = "human_example.pgx"    
    opt$root = "~/Playground/omicsplayground-master"
    opt$gxmethods = "trend.limma,edger.qlf,edger.lrt"
    opt$gsetmethods = "fisher,gsva,fgsea"
    opt$extramethods = "meta.go,infer,drugs,wordcloud"
}

## if(is.null(opt$out)){
##     print_help(opt_parser)
##     stop("At least one argument must be supplied (out file)\n", call.=FALSE)
## }

if(!file.exists(opt$counts))  stop("could not find counts file\n", call.=FALSE)
if(!file.exists(opt$samples)) stop("could not find samples file\n", call.=FALSE)
if(!dir.exists(opt$root))     stop("could not find Playground root folder\n", call.=FALSE)

RDIR  = file.path(opt$root,"R")
FILES = file.path(opt$root,"lib")

source(file.path(RDIR,"pgx-include.R"))
library(data.table)

counts.file  <- opt$counts
samples.file <- opt$samples
contrasts.file <- ifelse(opt$contrasts=="auto", NULL, opt$contrasts)

pgx <- pgx.createFromFiles(count.file, samples.file, contrasts.file=NULL, extra=FALSE)
cat("pgx.createFromFiles finished\n")

cat("saving PGX object to",opt$out,"\n")
ngs.save(pgx, file=opt$out)

cat("*********** pgxcreate finished *********\n")


