#!/usr/bin/env Rscript

##
## Make PGX file from CSV files
##
## (c) 2023 BigOmics Analytics 
##


if(!require(optparse, quietly=TRUE)) install.packages("optparse")
## require(optparse, quietly=TRUE)

option_list = list(
    optparse::make_option(c("-c", "--counts"), type="character", default="counts.csv", 
        help="Counts file name", metavar="character"),
    optparse::make_option(c("-s", "--samples"), type="character", default="samples.csv", 
        help="Samples file name [default= %default]", metavar="character"),
    optparse::make_option(c("-t", "--contrasts"), type="character", default="auto", 
        help="Specify contrasts file (or auto) for comparisons [default= %default]", metavar="character"),
    optparse::make_option(c("-o", "--out"), type="character", default="out.pgx", 
        help="Output PGX file name [default= %default]", metavar="character"),
    optparse::make_option(c("-r", "--root"), type="character", default="/omicsplayground", 
        help="Omicsplayground root folder [default= %default]", metavar="character"),      
    optparse::make_option(c("-g", "--maxgenes"), type="integer", default=25000, 
        help="Maximum number of genes [default= %default]", metavar="integer"),      
    optparse::make_option(c("-z", "--maxgenesets"), type="integer", default=5000, 
        help="Maximum number of genesets [default= %default]", metavar="integer"),      
    optparse::make_option(c("-m", "--gxmethods"), type="character", default="trend.limma,edger.qlf,deseq2.wald", 
        help="Gene testing methods [default= %default]", metavar="character"),      
    optparse::make_option(c("-d", "--gsetmethods"), type="character", default="fisher,gsva,fgsea", 
        help="Geneset testing methods [default= %default]", metavar="character"),
    optparse::make_option(c("-x", "--extra"), type="character", default="meta.go,deconv,infer,drugs,wordcloud", 
        help="Compute extra methods [default= %default]", metavar="character"),
    optparse::make_option(c("-f", "--folder"), type="character", default=".", 
        help="Input/output working folder [default= %default]", metavar="character"),        
    optparse::make_option(c("-e", "--description"), type="character", default="OmicsPlayground dataset", 
        help="Dataset description or file name [default= %default]", metavar="character"),
    optparse::make_option(c("-y", "--datatype"), type="character", default="RNA-seq", 
        help="Data type [default= %default]", metavar="character")  
)

opt_parser = optparse::OptionParser(option_list=option_list)
opt = optparse::parse_args(opt_parser)

if(0) {
    opt <- list()
    opt$counts  = "human/counts.csv"
    opt$samples = "human/samples.csv"
    opt$contrasts = "human/contrasts.csv"
#   opt$contrasts = "auto"
    opt$out = "human_example.pgx"    
    opt$root = "~/Playground/omicsplayground"
    opt$gxmethods = "trend.limma,edger.qlf,edger.lrt"
    opt$gsetmethods = "fisher,gsva,fgsea"
    opt$extramethods = "meta.go,infer,drugs,wordcloud"
}

if(is.null(opt$counts) || is.null(opt$samples) || is.null(opt$out)){
     print_help(opt_parser)
     if(is.null(opt$out))    stop("must supply output filename\n", call.=FALSE)
     if(is.null(opt$counts)) stop("must supply counts filename\n", call.=FALSE)
     if(is.null(opt$sample)) stop("must supply sample filename\n", call.=FALSE)
     stop("incomplete or invalid options\n", call.=FALSE)
}

if(dir.exists(opt$folder)) {
  cat("set working folder to",opt$folder,"\n")
  setwd(opt$folder)
}
if(!file.exists(opt$counts))  stop("could not find counts file\n", call.=FALSE)
if(!file.exists(opt$samples)) stop("could not find samples file\n", call.=FALSE)
if(!dir.exists(opt$root))     stop("could not find Playground root folder\n", call.=FALSE)

##RDIR  = file.path(opt$root,"components/00SourceAll.R")
RDIR  = file.path(opt$root,"R")
FILES = file.path(opt$root,"lib")
source(file.path(opt$root,"R/pgx-include.R"),chdir=TRUE)
library(data.table)

counts.file  <- opt$counts
samples.file <- opt$samples
contrasts.file <- NULL
if(!is.null(opt$contrasts) && opt$contrasts!="auto") {
    contrasts.file <- opt$contrasts
}
extra <- opt$extra

pgx <- pgx.createFromFiles(
    counts.file,
    samples.file,
    contrasts.file,
    gxmethods = opt$gxmethods,
    gsetmethods = opt$gsetmethods,
    extra = opt$extra)
cat("pgx.createFromFiles finished\n")

if(file.exists(opt$description)) {
  ## read description from file
  cat("reading description from file",opt$description,"\n")
  dd <- readLines(opt$description)
  dd <- paste(dd, collapse=" ")
  pgx$description <- substring(dd, 1, 1000)
} else {
  pgx$description <- opt$description
}

pgx$datatype <- opt$datatype

cat("saving PGX object to",opt$out,"\n")
ngs.save(pgx, file=opt$out)

cat("*********** pgxcreate finished *********\n")


