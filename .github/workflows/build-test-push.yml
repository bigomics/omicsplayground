name: Shinytest boards
on: 
  push:
env:
  DOCKER_TAG: masierom/omicsplayground:latest
jobs:
  unittest:
    runs-on: ubuntu-latest
    steps:
      -
        name: Print ls recursive
        run: ls -R
      -
        name: Checkout
        uses: actions/checkout@v3
      
      - 
        name: Print ls recursive after checkout
        run: ls -R
      
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN  }}
      -
        name: Shinytest docker
        id: test
        run: |
          docker build -t ${{ env.DOCKER_TAG }} -f ./.github/workflows/build-test-push/Dockerfile .
          docker run --rm ${{ env.DOCKER_TAG }}
      - 
        name: Print ls recursive after docker run
        run: ls -R
      

      - name: Upload snapshots as artifact
        uses: actions/upload-artifact@v3
        with:
          name: testthat-snapshots
          path: /omicsplayground/tests/testthat/_snaps/linux-4.1/board-values/*
          if-no-files-found: ignore
      
      - name: Configure Git
        run: |
          git config --local user.name "$GITHUB_ACTOR"
          git config --local user.email "$GITHUB_ACTOR@users.noreply.github.com"
      
      - name: Commit and push snapshots
        run: |
          cd ${{ github.workspace }}
          git add ./omicsplayground/tests/testthat/_snaps/linux-4.1/board-values/*
          git commit -m "Add new snapshots from testing"
          git push origin
      -
        name: Print working directory
        run: echo "pwd = ${{ steps.test.outputs.working_directory }}"
      -
        name: Print git diff
        run: echo "git diff = ${{ steps.test.outputs.git_diff }}"
        
      -
        name: Print test result
        run: echo "Test result = ${{ steps.test.outputs.test_result }}"
      -
        name: Push
        if: steps.test.outputs.test_result == 'TRUE'
        run: |
          docker push ${{ env.DOCKER_TAG }}
